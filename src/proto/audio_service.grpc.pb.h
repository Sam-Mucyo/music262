// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: audio_service.proto
#ifndef GRPC_audio_5fservice_2eproto__INCLUDED
#define GRPC_audio_5fservice_2eproto__INCLUDED

#include "audio_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace audio_service {

class audio_service final {
 public:
  static constexpr char const* service_full_name() {
    return "audio_service.audio_service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetPlaylist(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest& request, ::audio_service::PlaylistResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::audio_service::PlaylistResponse>> AsyncGetPlaylist(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::audio_service::PlaylistResponse>>(AsyncGetPlaylistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::audio_service::PlaylistResponse>> PrepareAsyncGetPlaylist(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::audio_service::PlaylistResponse>>(PrepareAsyncGetPlaylistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::audio_service::AudioChunk>> LoadAudio(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::audio_service::AudioChunk>>(LoadAudioRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::audio_service::AudioChunk>> AsyncLoadAudio(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::audio_service::AudioChunk>>(AsyncLoadAudioRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::audio_service::AudioChunk>> PrepareAsyncLoadAudio(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::audio_service::AudioChunk>>(PrepareAsyncLoadAudioRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPeerClientIPs(::grpc::ClientContext* context, const ::audio_service::PeerListRequest& request, ::audio_service::PeerListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::audio_service::PeerListResponse>> AsyncGetPeerClientIPs(::grpc::ClientContext* context, const ::audio_service::PeerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::audio_service::PeerListResponse>>(AsyncGetPeerClientIPsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::audio_service::PeerListResponse>> PrepareAsyncGetPeerClientIPs(::grpc::ClientContext* context, const ::audio_service::PeerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::audio_service::PeerListResponse>>(PrepareAsyncGetPeerClientIPsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetPlaylist(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest* request, ::audio_service::PlaylistResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPlaylist(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest* request, ::audio_service::PlaylistResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LoadAudio(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest* request, ::grpc::ClientReadReactor< ::audio_service::AudioChunk>* reactor) = 0;
      virtual void GetPeerClientIPs(::grpc::ClientContext* context, const ::audio_service::PeerListRequest* request, ::audio_service::PeerListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPeerClientIPs(::grpc::ClientContext* context, const ::audio_service::PeerListRequest* request, ::audio_service::PeerListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::audio_service::PlaylistResponse>* AsyncGetPlaylistRaw(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::audio_service::PlaylistResponse>* PrepareAsyncGetPlaylistRaw(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::audio_service::AudioChunk>* LoadAudioRaw(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::audio_service::AudioChunk>* AsyncLoadAudioRaw(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::audio_service::AudioChunk>* PrepareAsyncLoadAudioRaw(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::audio_service::PeerListResponse>* AsyncGetPeerClientIPsRaw(::grpc::ClientContext* context, const ::audio_service::PeerListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::audio_service::PeerListResponse>* PrepareAsyncGetPeerClientIPsRaw(::grpc::ClientContext* context, const ::audio_service::PeerListRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetPlaylist(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest& request, ::audio_service::PlaylistResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::audio_service::PlaylistResponse>> AsyncGetPlaylist(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::audio_service::PlaylistResponse>>(AsyncGetPlaylistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::audio_service::PlaylistResponse>> PrepareAsyncGetPlaylist(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::audio_service::PlaylistResponse>>(PrepareAsyncGetPlaylistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::audio_service::AudioChunk>> LoadAudio(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::audio_service::AudioChunk>>(LoadAudioRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::audio_service::AudioChunk>> AsyncLoadAudio(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::audio_service::AudioChunk>>(AsyncLoadAudioRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::audio_service::AudioChunk>> PrepareAsyncLoadAudio(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::audio_service::AudioChunk>>(PrepareAsyncLoadAudioRaw(context, request, cq));
    }
    ::grpc::Status GetPeerClientIPs(::grpc::ClientContext* context, const ::audio_service::PeerListRequest& request, ::audio_service::PeerListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::audio_service::PeerListResponse>> AsyncGetPeerClientIPs(::grpc::ClientContext* context, const ::audio_service::PeerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::audio_service::PeerListResponse>>(AsyncGetPeerClientIPsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::audio_service::PeerListResponse>> PrepareAsyncGetPeerClientIPs(::grpc::ClientContext* context, const ::audio_service::PeerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::audio_service::PeerListResponse>>(PrepareAsyncGetPeerClientIPsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetPlaylist(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest* request, ::audio_service::PlaylistResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPlaylist(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest* request, ::audio_service::PlaylistResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LoadAudio(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest* request, ::grpc::ClientReadReactor< ::audio_service::AudioChunk>* reactor) override;
      void GetPeerClientIPs(::grpc::ClientContext* context, const ::audio_service::PeerListRequest* request, ::audio_service::PeerListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPeerClientIPs(::grpc::ClientContext* context, const ::audio_service::PeerListRequest* request, ::audio_service::PeerListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::audio_service::PlaylistResponse>* AsyncGetPlaylistRaw(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::audio_service::PlaylistResponse>* PrepareAsyncGetPlaylistRaw(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::audio_service::AudioChunk>* LoadAudioRaw(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request) override;
    ::grpc::ClientAsyncReader< ::audio_service::AudioChunk>* AsyncLoadAudioRaw(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::audio_service::AudioChunk>* PrepareAsyncLoadAudioRaw(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::audio_service::PeerListResponse>* AsyncGetPeerClientIPsRaw(::grpc::ClientContext* context, const ::audio_service::PeerListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::audio_service::PeerListResponse>* PrepareAsyncGetPeerClientIPsRaw(::grpc::ClientContext* context, const ::audio_service::PeerListRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetPlaylist_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadAudio_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPeerClientIPs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetPlaylist(::grpc::ServerContext* context, const ::audio_service::PlaylistRequest* request, ::audio_service::PlaylistResponse* response);
    virtual ::grpc::Status LoadAudio(::grpc::ServerContext* context, const ::audio_service::LoadAudioRequest* request, ::grpc::ServerWriter< ::audio_service::AudioChunk>* writer);
    virtual ::grpc::Status GetPeerClientIPs(::grpc::ServerContext* context, const ::audio_service::PeerListRequest* request, ::audio_service::PeerListResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPlaylist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPlaylist() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetPlaylist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlaylist(::grpc::ServerContext* /*context*/, const ::audio_service::PlaylistRequest* /*request*/, ::audio_service::PlaylistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPlaylist(::grpc::ServerContext* context, ::audio_service::PlaylistRequest* request, ::grpc::ServerAsyncResponseWriter< ::audio_service::PlaylistResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadAudio() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LoadAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAudio(::grpc::ServerContext* /*context*/, const ::audio_service::LoadAudioRequest* /*request*/, ::grpc::ServerWriter< ::audio_service::AudioChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadAudio(::grpc::ServerContext* context, ::audio_service::LoadAudioRequest* request, ::grpc::ServerAsyncWriter< ::audio_service::AudioChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPeerClientIPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPeerClientIPs() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetPeerClientIPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerClientIPs(::grpc::ServerContext* /*context*/, const ::audio_service::PeerListRequest* /*request*/, ::audio_service::PeerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeerClientIPs(::grpc::ServerContext* context, ::audio_service::PeerListRequest* request, ::grpc::ServerAsyncResponseWriter< ::audio_service::PeerListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetPlaylist<WithAsyncMethod_LoadAudio<WithAsyncMethod_GetPeerClientIPs<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetPlaylist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPlaylist() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::audio_service::PlaylistRequest, ::audio_service::PlaylistResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::audio_service::PlaylistRequest* request, ::audio_service::PlaylistResponse* response) { return this->GetPlaylist(context, request, response); }));}
    void SetMessageAllocatorFor_GetPlaylist(
        ::grpc::MessageAllocator< ::audio_service::PlaylistRequest, ::audio_service::PlaylistResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::audio_service::PlaylistRequest, ::audio_service::PlaylistResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPlaylist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlaylist(::grpc::ServerContext* /*context*/, const ::audio_service::PlaylistRequest* /*request*/, ::audio_service::PlaylistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPlaylist(
      ::grpc::CallbackServerContext* /*context*/, const ::audio_service::PlaylistRequest* /*request*/, ::audio_service::PlaylistResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LoadAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadAudio() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::audio_service::LoadAudioRequest, ::audio_service::AudioChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::audio_service::LoadAudioRequest* request) { return this->LoadAudio(context, request); }));
    }
    ~WithCallbackMethod_LoadAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAudio(::grpc::ServerContext* /*context*/, const ::audio_service::LoadAudioRequest* /*request*/, ::grpc::ServerWriter< ::audio_service::AudioChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::audio_service::AudioChunk>* LoadAudio(
      ::grpc::CallbackServerContext* /*context*/, const ::audio_service::LoadAudioRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPeerClientIPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPeerClientIPs() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::audio_service::PeerListRequest, ::audio_service::PeerListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::audio_service::PeerListRequest* request, ::audio_service::PeerListResponse* response) { return this->GetPeerClientIPs(context, request, response); }));}
    void SetMessageAllocatorFor_GetPeerClientIPs(
        ::grpc::MessageAllocator< ::audio_service::PeerListRequest, ::audio_service::PeerListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::audio_service::PeerListRequest, ::audio_service::PeerListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPeerClientIPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerClientIPs(::grpc::ServerContext* /*context*/, const ::audio_service::PeerListRequest* /*request*/, ::audio_service::PeerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPeerClientIPs(
      ::grpc::CallbackServerContext* /*context*/, const ::audio_service::PeerListRequest* /*request*/, ::audio_service::PeerListResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetPlaylist<WithCallbackMethod_LoadAudio<WithCallbackMethod_GetPeerClientIPs<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetPlaylist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPlaylist() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetPlaylist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlaylist(::grpc::ServerContext* /*context*/, const ::audio_service::PlaylistRequest* /*request*/, ::audio_service::PlaylistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadAudio() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LoadAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAudio(::grpc::ServerContext* /*context*/, const ::audio_service::LoadAudioRequest* /*request*/, ::grpc::ServerWriter< ::audio_service::AudioChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPeerClientIPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPeerClientIPs() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetPeerClientIPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerClientIPs(::grpc::ServerContext* /*context*/, const ::audio_service::PeerListRequest* /*request*/, ::audio_service::PeerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPlaylist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPlaylist() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetPlaylist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlaylist(::grpc::ServerContext* /*context*/, const ::audio_service::PlaylistRequest* /*request*/, ::audio_service::PlaylistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPlaylist(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadAudio() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_LoadAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAudio(::grpc::ServerContext* /*context*/, const ::audio_service::LoadAudioRequest* /*request*/, ::grpc::ServerWriter< ::audio_service::AudioChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadAudio(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPeerClientIPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPeerClientIPs() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetPeerClientIPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerClientIPs(::grpc::ServerContext* /*context*/, const ::audio_service::PeerListRequest* /*request*/, ::audio_service::PeerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeerClientIPs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPlaylist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPlaylist() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPlaylist(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPlaylist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPlaylist(::grpc::ServerContext* /*context*/, const ::audio_service::PlaylistRequest* /*request*/, ::audio_service::PlaylistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPlaylist(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadAudio() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->LoadAudio(context, request); }));
    }
    ~WithRawCallbackMethod_LoadAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadAudio(::grpc::ServerContext* /*context*/, const ::audio_service::LoadAudioRequest* /*request*/, ::grpc::ServerWriter< ::audio_service::AudioChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* LoadAudio(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPeerClientIPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPeerClientIPs() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPeerClientIPs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPeerClientIPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerClientIPs(::grpc::ServerContext* /*context*/, const ::audio_service::PeerListRequest* /*request*/, ::audio_service::PeerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPeerClientIPs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPlaylist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPlaylist() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::audio_service::PlaylistRequest, ::audio_service::PlaylistResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::audio_service::PlaylistRequest, ::audio_service::PlaylistResponse>* streamer) {
                       return this->StreamedGetPlaylist(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPlaylist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPlaylist(::grpc::ServerContext* /*context*/, const ::audio_service::PlaylistRequest* /*request*/, ::audio_service::PlaylistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPlaylist(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::audio_service::PlaylistRequest,::audio_service::PlaylistResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPeerClientIPs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPeerClientIPs() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::audio_service::PeerListRequest, ::audio_service::PeerListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::audio_service::PeerListRequest, ::audio_service::PeerListResponse>* streamer) {
                       return this->StreamedGetPeerClientIPs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPeerClientIPs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPeerClientIPs(::grpc::ServerContext* /*context*/, const ::audio_service::PeerListRequest* /*request*/, ::audio_service::PeerListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPeerClientIPs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::audio_service::PeerListRequest,::audio_service::PeerListResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetPlaylist<WithStreamedUnaryMethod_GetPeerClientIPs<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_LoadAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_LoadAudio() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::audio_service::LoadAudioRequest, ::audio_service::AudioChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::audio_service::LoadAudioRequest, ::audio_service::AudioChunk>* streamer) {
                       return this->StreamedLoadAudio(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_LoadAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadAudio(::grpc::ServerContext* /*context*/, const ::audio_service::LoadAudioRequest* /*request*/, ::grpc::ServerWriter< ::audio_service::AudioChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedLoadAudio(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::audio_service::LoadAudioRequest,::audio_service::AudioChunk>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_LoadAudio<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetPlaylist<WithSplitStreamingMethod_LoadAudio<WithStreamedUnaryMethod_GetPeerClientIPs<Service > > > StreamedService;
};

}  // namespace audio_service


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_audio_5fservice_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: audio_service.proto

#include "audio_service.pb.h"
#include "audio_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace audio_service {

static const char* audio_service_method_names[] = {
  "/audio_service.audio_service/GetPlaylist",
  "/audio_service.audio_service/LoadAudio",
  "/audio_service.audio_service/GetPeerClientIPs",
};

std::unique_ptr< audio_service::Stub> audio_service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< audio_service::Stub> stub(new audio_service::Stub(channel, options));
  return stub;
}

audio_service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetPlaylist_(audio_service_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadAudio_(audio_service_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetPeerClientIPs_(audio_service_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status audio_service::Stub::GetPlaylist(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest& request, ::audio_service::PlaylistResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::audio_service::PlaylistRequest, ::audio_service::PlaylistResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPlaylist_, context, request, response);
}

void audio_service::Stub::async::GetPlaylist(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest* request, ::audio_service::PlaylistResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::audio_service::PlaylistRequest, ::audio_service::PlaylistResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlaylist_, context, request, response, std::move(f));
}

void audio_service::Stub::async::GetPlaylist(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest* request, ::audio_service::PlaylistResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlaylist_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::audio_service::PlaylistResponse>* audio_service::Stub::PrepareAsyncGetPlaylistRaw(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::audio_service::PlaylistResponse, ::audio_service::PlaylistRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPlaylist_, context, request);
}

::grpc::ClientAsyncResponseReader< ::audio_service::PlaylistResponse>* audio_service::Stub::AsyncGetPlaylistRaw(::grpc::ClientContext* context, const ::audio_service::PlaylistRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPlaylistRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::audio_service::AudioChunk>* audio_service::Stub::LoadAudioRaw(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::audio_service::AudioChunk>::Create(channel_.get(), rpcmethod_LoadAudio_, context, request);
}

void audio_service::Stub::async::LoadAudio(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest* request, ::grpc::ClientReadReactor< ::audio_service::AudioChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::audio_service::AudioChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_LoadAudio_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::audio_service::AudioChunk>* audio_service::Stub::AsyncLoadAudioRaw(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::audio_service::AudioChunk>::Create(channel_.get(), cq, rpcmethod_LoadAudio_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::audio_service::AudioChunk>* audio_service::Stub::PrepareAsyncLoadAudioRaw(::grpc::ClientContext* context, const ::audio_service::LoadAudioRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::audio_service::AudioChunk>::Create(channel_.get(), cq, rpcmethod_LoadAudio_, context, request, false, nullptr);
}

::grpc::Status audio_service::Stub::GetPeerClientIPs(::grpc::ClientContext* context, const ::audio_service::PeerListRequest& request, ::audio_service::PeerListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::audio_service::PeerListRequest, ::audio_service::PeerListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPeerClientIPs_, context, request, response);
}

void audio_service::Stub::async::GetPeerClientIPs(::grpc::ClientContext* context, const ::audio_service::PeerListRequest* request, ::audio_service::PeerListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::audio_service::PeerListRequest, ::audio_service::PeerListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPeerClientIPs_, context, request, response, std::move(f));
}

void audio_service::Stub::async::GetPeerClientIPs(::grpc::ClientContext* context, const ::audio_service::PeerListRequest* request, ::audio_service::PeerListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPeerClientIPs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::audio_service::PeerListResponse>* audio_service::Stub::PrepareAsyncGetPeerClientIPsRaw(::grpc::ClientContext* context, const ::audio_service::PeerListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::audio_service::PeerListResponse, ::audio_service::PeerListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPeerClientIPs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::audio_service::PeerListResponse>* audio_service::Stub::AsyncGetPeerClientIPsRaw(::grpc::ClientContext* context, const ::audio_service::PeerListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPeerClientIPsRaw(context, request, cq);
  result->StartCall();
  return result;
}

audio_service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      audio_service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< audio_service::Service, ::audio_service::PlaylistRequest, ::audio_service::PlaylistResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](audio_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::audio_service::PlaylistRequest* req,
             ::audio_service::PlaylistResponse* resp) {
               return service->GetPlaylist(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      audio_service_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< audio_service::Service, ::audio_service::LoadAudioRequest, ::audio_service::AudioChunk>(
          [](audio_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::audio_service::LoadAudioRequest* req,
             ::grpc::ServerWriter<::audio_service::AudioChunk>* writer) {
               return service->LoadAudio(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      audio_service_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< audio_service::Service, ::audio_service::PeerListRequest, ::audio_service::PeerListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](audio_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::audio_service::PeerListRequest* req,
             ::audio_service::PeerListResponse* resp) {
               return service->GetPeerClientIPs(ctx, req, resp);
             }, this)));
}

audio_service::Service::~Service() {
}

::grpc::Status audio_service::Service::GetPlaylist(::grpc::ServerContext* context, const ::audio_service::PlaylistRequest* request, ::audio_service::PlaylistResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status audio_service::Service::LoadAudio(::grpc::ServerContext* context, const ::audio_service::LoadAudioRequest* request, ::grpc::ServerWriter< ::audio_service::AudioChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status audio_service::Service::GetPeerClientIPs(::grpc::ServerContext* context, const ::audio_service::PeerListRequest* request, ::audio_service::PeerListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace audio_service


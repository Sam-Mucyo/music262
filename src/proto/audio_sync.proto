syntax = "proto3";

package client;

// Message for peer gossip
message GossipResponse {}
message GossipRequest {
  repeated string peer_list = 1; // list of known peer addresses
}

// Messages for ping
message PingRequest {}
message PingResponse {
  int32 t1 = 1;
  int32 t2 = 2;
}

// Messages for music control
message MusicRequest {
  string action = 1;       // "play", "pause", "resume", "stop"
  float wall_clock = 2;    // wall clock time of action
  float wait_time = 3;     // wait time in milliseconds
  int32 position = 4;      // position of song
}

message MusicResponse {}

// Messages for querying position
message GetPositionRequest {}
message GetPositionResponse {
  int32 position = 1;
}

// Define the service
service ClientHandler {
  rpc Gossip(GossipRequest) returns (GossipResponse);
  rpc Ping(PingRequest) returns (PingResponse);
  rpc SendMusicCommand(MusicRequest) returns (MusicResponse);
  rpc GetPosition(GetPositionRequest) returns (GetPositionResponse);
}
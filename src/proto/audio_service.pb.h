// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: audio_service.proto
// Protobuf C++ Version: 5.29.3

#ifndef audio_5fservice_2eproto_2epb_2eh
#define audio_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_audio_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_audio_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_audio_5fservice_2eproto;
namespace audio_service {
class AudioChunk;
struct AudioChunkDefaultTypeInternal;
extern AudioChunkDefaultTypeInternal _AudioChunk_default_instance_;
class LoadAudioRequest;
struct LoadAudioRequestDefaultTypeInternal;
extern LoadAudioRequestDefaultTypeInternal _LoadAudioRequest_default_instance_;
class PeerListRequest;
struct PeerListRequestDefaultTypeInternal;
extern PeerListRequestDefaultTypeInternal _PeerListRequest_default_instance_;
class PeerListResponse;
struct PeerListResponseDefaultTypeInternal;
extern PeerListResponseDefaultTypeInternal _PeerListResponse_default_instance_;
class PlaylistRequest;
struct PlaylistRequestDefaultTypeInternal;
extern PlaylistRequestDefaultTypeInternal _PlaylistRequest_default_instance_;
class PlaylistResponse;
struct PlaylistResponseDefaultTypeInternal;
extern PlaylistResponseDefaultTypeInternal _PlaylistResponse_default_instance_;
}  // namespace audio_service
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace audio_service {

// ===================================================================


// -------------------------------------------------------------------

class PlaylistResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:audio_service.PlaylistResponse) */ {
 public:
  inline PlaylistResponse() : PlaylistResponse(nullptr) {}
  ~PlaylistResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlaylistResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlaylistResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlaylistResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlaylistResponse(const PlaylistResponse& from) : PlaylistResponse(nullptr, from) {}
  inline PlaylistResponse(PlaylistResponse&& from) noexcept
      : PlaylistResponse(nullptr, std::move(from)) {}
  inline PlaylistResponse& operator=(const PlaylistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaylistResponse& operator=(PlaylistResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaylistResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaylistResponse* internal_default_instance() {
    return reinterpret_cast<const PlaylistResponse*>(
        &_PlaylistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PlaylistResponse& a, PlaylistResponse& b) { a.Swap(&b); }
  inline void Swap(PlaylistResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaylistResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaylistResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PlaylistResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlaylistResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlaylistResponse& from) { PlaylistResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PlaylistResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "audio_service.PlaylistResponse"; }

 protected:
  explicit PlaylistResponse(::google::protobuf::Arena* arena);
  PlaylistResponse(::google::protobuf::Arena* arena, const PlaylistResponse& from);
  PlaylistResponse(::google::protobuf::Arena* arena, PlaylistResponse&& from) noexcept
      : PlaylistResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSongNamesFieldNumber = 1,
  };
  // repeated string song_names = 1;
  int song_names_size() const;
  private:
  int _internal_song_names_size() const;

  public:
  void clear_song_names() ;
  const std::string& song_names(int index) const;
  std::string* mutable_song_names(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_song_names(int index, Arg_&& value, Args_... args);
  std::string* add_song_names();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_song_names(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& song_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_song_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_song_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_song_names();

  public:
  // @@protoc_insertion_point(class_scope:audio_service.PlaylistResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlaylistResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> song_names_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audio_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PlaylistRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:audio_service.PlaylistRequest) */ {
 public:
  inline PlaylistRequest() : PlaylistRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlaylistRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlaylistRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlaylistRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlaylistRequest(const PlaylistRequest& from) : PlaylistRequest(nullptr, from) {}
  inline PlaylistRequest(PlaylistRequest&& from) noexcept
      : PlaylistRequest(nullptr, std::move(from)) {}
  inline PlaylistRequest& operator=(const PlaylistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaylistRequest& operator=(PlaylistRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaylistRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaylistRequest* internal_default_instance() {
    return reinterpret_cast<const PlaylistRequest*>(
        &_PlaylistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PlaylistRequest& a, PlaylistRequest& b) { a.Swap(&b); }
  inline void Swap(PlaylistRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaylistRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaylistRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<PlaylistRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PlaylistRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PlaylistRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "audio_service.PlaylistRequest"; }

 protected:
  explicit PlaylistRequest(::google::protobuf::Arena* arena);
  PlaylistRequest(::google::protobuf::Arena* arena, const PlaylistRequest& from);
  PlaylistRequest(::google::protobuf::Arena* arena, PlaylistRequest&& from) noexcept
      : PlaylistRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:audio_service.PlaylistRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlaylistRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_audio_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PeerListResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:audio_service.PeerListResponse) */ {
 public:
  inline PeerListResponse() : PeerListResponse(nullptr) {}
  ~PeerListResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PeerListResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PeerListResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PeerListResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PeerListResponse(const PeerListResponse& from) : PeerListResponse(nullptr, from) {}
  inline PeerListResponse(PeerListResponse&& from) noexcept
      : PeerListResponse(nullptr, std::move(from)) {}
  inline PeerListResponse& operator=(const PeerListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerListResponse& operator=(PeerListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeerListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerListResponse* internal_default_instance() {
    return reinterpret_cast<const PeerListResponse*>(
        &_PeerListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(PeerListResponse& a, PeerListResponse& b) { a.Swap(&b); }
  inline void Swap(PeerListResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerListResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PeerListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PeerListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PeerListResponse& from) { PeerListResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PeerListResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "audio_service.PeerListResponse"; }

 protected:
  explicit PeerListResponse(::google::protobuf::Arena* arena);
  PeerListResponse(::google::protobuf::Arena* arena, const PeerListResponse& from);
  PeerListResponse(::google::protobuf::Arena* arena, PeerListResponse&& from) noexcept
      : PeerListResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientIpsFieldNumber = 1,
  };
  // repeated string client_ips = 1;
  int client_ips_size() const;
  private:
  int _internal_client_ips_size() const;

  public:
  void clear_client_ips() ;
  const std::string& client_ips(int index) const;
  std::string* mutable_client_ips(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_ips(int index, Arg_&& value, Args_... args);
  std::string* add_client_ips();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_client_ips(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& client_ips() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_client_ips();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_client_ips() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_client_ips();

  public:
  // @@protoc_insertion_point(class_scope:audio_service.PeerListResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PeerListResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> client_ips_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audio_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PeerListRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:audio_service.PeerListRequest) */ {
 public:
  inline PeerListRequest() : PeerListRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PeerListRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PeerListRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PeerListRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PeerListRequest(const PeerListRequest& from) : PeerListRequest(nullptr, from) {}
  inline PeerListRequest(PeerListRequest&& from) noexcept
      : PeerListRequest(nullptr, std::move(from)) {}
  inline PeerListRequest& operator=(const PeerListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerListRequest& operator=(PeerListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeerListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerListRequest* internal_default_instance() {
    return reinterpret_cast<const PeerListRequest*>(
        &_PeerListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(PeerListRequest& a, PeerListRequest& b) { a.Swap(&b); }
  inline void Swap(PeerListRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerListRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<PeerListRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PeerListRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PeerListRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "audio_service.PeerListRequest"; }

 protected:
  explicit PeerListRequest(::google::protobuf::Arena* arena);
  PeerListRequest(::google::protobuf::Arena* arena, const PeerListRequest& from);
  PeerListRequest(::google::protobuf::Arena* arena, PeerListRequest&& from) noexcept
      : PeerListRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:audio_service.PeerListRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PeerListRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_audio_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoadAudioRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:audio_service.LoadAudioRequest) */ {
 public:
  inline LoadAudioRequest() : LoadAudioRequest(nullptr) {}
  ~LoadAudioRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LoadAudioRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LoadAudioRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LoadAudioRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline LoadAudioRequest(const LoadAudioRequest& from) : LoadAudioRequest(nullptr, from) {}
  inline LoadAudioRequest(LoadAudioRequest&& from) noexcept
      : LoadAudioRequest(nullptr, std::move(from)) {}
  inline LoadAudioRequest& operator=(const LoadAudioRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadAudioRequest& operator=(LoadAudioRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadAudioRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadAudioRequest* internal_default_instance() {
    return reinterpret_cast<const LoadAudioRequest*>(
        &_LoadAudioRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(LoadAudioRequest& a, LoadAudioRequest& b) { a.Swap(&b); }
  inline void Swap(LoadAudioRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadAudioRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadAudioRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LoadAudioRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoadAudioRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LoadAudioRequest& from) { LoadAudioRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LoadAudioRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "audio_service.LoadAudioRequest"; }

 protected:
  explicit LoadAudioRequest(::google::protobuf::Arena* arena);
  LoadAudioRequest(::google::protobuf::Arena* arena, const LoadAudioRequest& from);
  LoadAudioRequest(::google::protobuf::Arena* arena, LoadAudioRequest&& from) noexcept
      : LoadAudioRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSongNumFieldNumber = 1,
    kChannelIndexFieldNumber = 2,
  };
  // int32 song_num = 1;
  void clear_song_num() ;
  ::int32_t song_num() const;
  void set_song_num(::int32_t value);

  private:
  ::int32_t _internal_song_num() const;
  void _internal_set_song_num(::int32_t value);

  public:
  // int32 channel_index = 2;
  void clear_channel_index() ;
  ::int32_t channel_index() const;
  void set_channel_index(::int32_t value);

  private:
  ::int32_t _internal_channel_index() const;
  void _internal_set_channel_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:audio_service.LoadAudioRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LoadAudioRequest& from_msg);
    ::int32_t song_num_;
    ::int32_t channel_index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audio_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AudioChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:audio_service.AudioChunk) */ {
 public:
  inline AudioChunk() : AudioChunk(nullptr) {}
  ~AudioChunk() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioChunk* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioChunk));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline AudioChunk(const AudioChunk& from) : AudioChunk(nullptr, from) {}
  inline AudioChunk(AudioChunk&& from) noexcept
      : AudioChunk(nullptr, std::move(from)) {}
  inline AudioChunk& operator=(const AudioChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioChunk& operator=(AudioChunk&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioChunk* internal_default_instance() {
    return reinterpret_cast<const AudioChunk*>(
        &_AudioChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AudioChunk& a, AudioChunk& b) { a.Swap(&b); }
  inline void Swap(AudioChunk* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioChunk* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AudioChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioChunk& from) { AudioChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioChunk* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "audio_service.AudioChunk"; }

 protected:
  explicit AudioChunk(::google::protobuf::Arena* arena);
  AudioChunk(::google::protobuf::Arena* arena, const AudioChunk& from);
  AudioChunk(::google::protobuf::Arena* arena, AudioChunk&& from) noexcept
      : AudioChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:audio_service.AudioChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AudioChunk& from_msg);
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audio_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PlaylistRequest

// -------------------------------------------------------------------

// PlaylistResponse

// repeated string song_names = 1;
inline int PlaylistResponse::_internal_song_names_size() const {
  return _internal_song_names().size();
}
inline int PlaylistResponse::song_names_size() const {
  return _internal_song_names_size();
}
inline void PlaylistResponse::clear_song_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.song_names_.Clear();
}
inline std::string* PlaylistResponse::add_song_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_song_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:audio_service.PlaylistResponse.song_names)
  return _s;
}
inline const std::string& PlaylistResponse::song_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:audio_service.PlaylistResponse.song_names)
  return _internal_song_names().Get(index);
}
inline std::string* PlaylistResponse::mutable_song_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:audio_service.PlaylistResponse.song_names)
  return _internal_mutable_song_names()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void PlaylistResponse::set_song_names(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_song_names()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:audio_service.PlaylistResponse.song_names)
}
template <typename Arg_, typename... Args_>
inline void PlaylistResponse::add_song_names(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_song_names(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:audio_service.PlaylistResponse.song_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PlaylistResponse::song_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:audio_service.PlaylistResponse.song_names)
  return _internal_song_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PlaylistResponse::mutable_song_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:audio_service.PlaylistResponse.song_names)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_song_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PlaylistResponse::_internal_song_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.song_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PlaylistResponse::_internal_mutable_song_names() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.song_names_;
}

// -------------------------------------------------------------------

// LoadAudioRequest

// int32 song_num = 1;
inline void LoadAudioRequest::clear_song_num() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.song_num_ = 0;
}
inline ::int32_t LoadAudioRequest::song_num() const {
  // @@protoc_insertion_point(field_get:audio_service.LoadAudioRequest.song_num)
  return _internal_song_num();
}
inline void LoadAudioRequest::set_song_num(::int32_t value) {
  _internal_set_song_num(value);
  // @@protoc_insertion_point(field_set:audio_service.LoadAudioRequest.song_num)
}
inline ::int32_t LoadAudioRequest::_internal_song_num() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.song_num_;
}
inline void LoadAudioRequest::_internal_set_song_num(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.song_num_ = value;
}

// int32 channel_index = 2;
inline void LoadAudioRequest::clear_channel_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_index_ = 0;
}
inline ::int32_t LoadAudioRequest::channel_index() const {
  // @@protoc_insertion_point(field_get:audio_service.LoadAudioRequest.channel_index)
  return _internal_channel_index();
}
inline void LoadAudioRequest::set_channel_index(::int32_t value) {
  _internal_set_channel_index(value);
  // @@protoc_insertion_point(field_set:audio_service.LoadAudioRequest.channel_index)
}
inline ::int32_t LoadAudioRequest::_internal_channel_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_index_;
}
inline void LoadAudioRequest::_internal_set_channel_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_index_ = value;
}

// -------------------------------------------------------------------

// AudioChunk

// bytes data = 1;
inline void AudioChunk::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& AudioChunk::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:audio_service.AudioChunk.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioChunk::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:audio_service.AudioChunk.data)
}
inline std::string* AudioChunk::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:audio_service.AudioChunk.data)
  return _s;
}
inline const std::string& AudioChunk::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void AudioChunk::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* AudioChunk::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* AudioChunk::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:audio_service.AudioChunk.data)
  return _impl_.data_.Release();
}
inline void AudioChunk::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:audio_service.AudioChunk.data)
}

// -------------------------------------------------------------------

// PeerListRequest

// -------------------------------------------------------------------

// PeerListResponse

// repeated string client_ips = 1;
inline int PeerListResponse::_internal_client_ips_size() const {
  return _internal_client_ips().size();
}
inline int PeerListResponse::client_ips_size() const {
  return _internal_client_ips_size();
}
inline void PeerListResponse::clear_client_ips() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_ips_.Clear();
}
inline std::string* PeerListResponse::add_client_ips() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_client_ips()->Add();
  // @@protoc_insertion_point(field_add_mutable:audio_service.PeerListResponse.client_ips)
  return _s;
}
inline const std::string& PeerListResponse::client_ips(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:audio_service.PeerListResponse.client_ips)
  return _internal_client_ips().Get(index);
}
inline std::string* PeerListResponse::mutable_client_ips(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:audio_service.PeerListResponse.client_ips)
  return _internal_mutable_client_ips()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void PeerListResponse::set_client_ips(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_client_ips()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:audio_service.PeerListResponse.client_ips)
}
template <typename Arg_, typename... Args_>
inline void PeerListResponse::add_client_ips(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_client_ips(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:audio_service.PeerListResponse.client_ips)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PeerListResponse::client_ips() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:audio_service.PeerListResponse.client_ips)
  return _internal_client_ips();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PeerListResponse::mutable_client_ips() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:audio_service.PeerListResponse.client_ips)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_client_ips();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PeerListResponse::_internal_client_ips() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_ips_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PeerListResponse::_internal_mutable_client_ips() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.client_ips_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace audio_service


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // audio_5fservice_2eproto_2epb_2eh

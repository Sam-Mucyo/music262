// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: audio_sync.proto

#include "audio_sync.pb.h"
#include "audio_sync.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace client {

static const char* ClientHandler_method_names[] = {
  "/client.ClientHandler/Ping",
  "/client.ClientHandler/SendMusicCommand",
  "/client.ClientHandler/GetPosition",
};

std::unique_ptr< ClientHandler::Stub> ClientHandler::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientHandler::Stub> stub(new ClientHandler::Stub(channel, options));
  return stub;
}

ClientHandler::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Ping_(ClientHandler_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMusicCommand_(ClientHandler_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPosition_(ClientHandler_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientHandler::Stub::Ping(::grpc::ClientContext* context, const ::client::PingRequest& request, ::client::PingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::client::PingRequest, ::client::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void ClientHandler::Stub::async::Ping(::grpc::ClientContext* context, const ::client::PingRequest* request, ::client::PingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::client::PingRequest, ::client::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void ClientHandler::Stub::async::Ping(::grpc::ClientContext* context, const ::client::PingRequest* request, ::client::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::client::PingResponse>* ClientHandler::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::client::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::client::PingResponse, ::client::PingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::client::PingResponse>* ClientHandler::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::client::PingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientHandler::Stub::SendMusicCommand(::grpc::ClientContext* context, const ::client::MusicRequest& request, ::client::MusicResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::client::MusicRequest, ::client::MusicResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMusicCommand_, context, request, response);
}

void ClientHandler::Stub::async::SendMusicCommand(::grpc::ClientContext* context, const ::client::MusicRequest* request, ::client::MusicResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::client::MusicRequest, ::client::MusicResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMusicCommand_, context, request, response, std::move(f));
}

void ClientHandler::Stub::async::SendMusicCommand(::grpc::ClientContext* context, const ::client::MusicRequest* request, ::client::MusicResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMusicCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::client::MusicResponse>* ClientHandler::Stub::PrepareAsyncSendMusicCommandRaw(::grpc::ClientContext* context, const ::client::MusicRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::client::MusicResponse, ::client::MusicRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMusicCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::client::MusicResponse>* ClientHandler::Stub::AsyncSendMusicCommandRaw(::grpc::ClientContext* context, const ::client::MusicRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMusicCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientHandler::Stub::GetPosition(::grpc::ClientContext* context, const ::client::GetPositionRequest& request, ::client::GetPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::client::GetPositionRequest, ::client::GetPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPosition_, context, request, response);
}

void ClientHandler::Stub::async::GetPosition(::grpc::ClientContext* context, const ::client::GetPositionRequest* request, ::client::GetPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::client::GetPositionRequest, ::client::GetPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, std::move(f));
}

void ClientHandler::Stub::async::GetPosition(::grpc::ClientContext* context, const ::client::GetPositionRequest* request, ::client::GetPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::client::GetPositionResponse>* ClientHandler::Stub::PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::client::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::client::GetPositionResponse, ::client::GetPositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::client::GetPositionResponse>* ClientHandler::Stub::AsyncGetPositionRaw(::grpc::ClientContext* context, const ::client::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClientHandler::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientHandler_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientHandler::Service, ::client::PingRequest, ::client::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::client::PingRequest* req,
             ::client::PingResponse* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientHandler_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientHandler::Service, ::client::MusicRequest, ::client::MusicResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::client::MusicRequest* req,
             ::client::MusicResponse* resp) {
               return service->SendMusicCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientHandler_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientHandler::Service, ::client::GetPositionRequest, ::client::GetPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::client::GetPositionRequest* req,
             ::client::GetPositionResponse* resp) {
               return service->GetPosition(ctx, req, resp);
             }, this)));
}

ClientHandler::Service::~Service() {
}

::grpc::Status ClientHandler::Service::Ping(::grpc::ServerContext* context, const ::client::PingRequest* request, ::client::PingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientHandler::Service::SendMusicCommand(::grpc::ServerContext* context, const ::client::MusicRequest* request, ::client::MusicResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientHandler::Service::GetPosition(::grpc::ServerContext* context, const ::client::GetPositionRequest* request, ::client::GetPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace client

